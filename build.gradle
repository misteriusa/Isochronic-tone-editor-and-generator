/*
 * This file defines the build script for the root project and configures all sub-projects.
 */

plugins {
    id 'com.github.spotbugs' version '6.0.14' apply false
}

// Configure all projects (the root project and all sub-projects)
plugins {
    id 'org.openjfx.javafxplugin' version '0.1.0' apply false
}

allprojects {
    repositories {
        // Use Maven Central for standard dependencies.
        mavenCentral()
        // Define a flat directory repository to include local JAR files from the 'libs' folder.
        flatDir {
            dirs "${rootDir}/libs"
        }
    }
}

// Configure all sub-projects (player, editor, cli).

    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.spotbugs'

    // Configure the Java toolchain to use Java 17 for all sub-projects.
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    // Define dependencies for all sub-projects.
    dependencies {
        // Add JUnit 5 for testing.
        testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'

        // JSON handling and schema validation
        implementation 'org.json:json:20231013'
        implementation 'org.everit.json:org.everit.json.schema:1.5.1'

        // Add local JARs from the 'libs' directory as dependencies by name.
        implementation name: 'LibBWEntrainment'
        implementation name: 'LibBWEntrainment-Renderer-Isochronic'
        implementation name: 'LibBWEntrainment-SoundBackend-FLAC'
        implementation name: 'LibBWEntrainment-SoundBackend-MP3'
        implementation name: 'LibBWEntrainment-SoundBackend-PC'
        implementation name: 'LibBWEntrainment-SoundBackend-Wav'
        implementation name: 'JavaLAME'
        implementation name: 'javaFlacEncoder-0.3.1'
        implementation name: 'apple-0.0.2'
        implementation name: 'jna-4.2.1'
    }

    // Configure static analysis and coverage tooling.
    spotbugs {
        ignoreFailures = true // Do not fail build on findings; surfaced in reports
    }

    jacoco {
        toolVersion = '0.8.11'
    }

    // Configure the 'test' task to use the JUnit Platform for running tests.
    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport // Generate coverage after tests
    }

    jacocoTestReport {
        reports {
            xml.required.set(true)
            html.required.set(true)
        }
    }

        // Register a custom 'fatJar' task to create a single, executable JAR
        // that includes all dependencies and documentation.
        tasks.register('fatJar', Jar) {
            archiveClassifier.set('all') // Appends '-all' to the JAR file name.
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE // Exclude duplicate files from dependencies.
            manifest.attributes('Main-Class': application.mainClass.get()) // Set the main class in the manifest.
            // Collect all runtime dependencies and package them into the JAR.
            from {
                configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
            }
            from("${rootDir}/docs") {
                include 'best_practices.md'
                into 'docs'
            }
            with jar
        }

        // Ensure standard JARs also include the guide.
        tasks.named('jar') {
            from("${rootDir}/docs") {
                include 'best_practices.md'
                into 'docs'
            }
        }
    }

// Lint check to ensure the best practices guide is present for distribution.
tasks.register('checkBestPracticesDoc') {
    doLast {
        def guide = file("${rootDir}/docs/best_practices.md")
        if (!guide.exists()) {
            throw new GradleException('Missing docs/best_practices.md; distribution must include this guide.')
        }
    }
}

}

// Configure the 'player' sub-project.
project(':player') {
    application {
        // Set the main class for the player application.
        mainClass = 'com.dosse.bwentrain.player.Main'
    }
}

// Configure the 'editor' sub-project.
project(':editor') {
    apply plugin: 'org.openjfx.javafxplugin'

    application {
        // Launch the JavaFX-based editor entry point.
        mainClass = 'com.dosse.bwentrain.editor.EditorApp'
    }

    javafx {
        version = '21.0.2'
        modules = [ 'javafx.controls' ]
    }

    dependencies {
        // TestFX offers simple integration testing for JavaFX views
        testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
    }
}

// Configure the 'cli' sub-project.
project(':cli') {
    application {
        // Set the main class for the command-line interface application.
        mainClass = 'com.dosse.bwentrain.cli.Main'
    }
}
